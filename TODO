# 🚀 Lista de Tarefas - Projeto Gamificação da Newsletter

## 🧑‍💻 Área de Login para Leitores
- [-] Criar página de login onde os leitores podem inserir o e-mail para acessar a área logada.
- [-] Exibir o streak atual (quantos dias consecutivos o leitor abriu a newsletter).
- [-] Mostrar o histórico de aberturas da newsletter.
- [ ] Exibir mensagens motivacionais para incentivar a manutenção do streak.
- [-] ranking dos leitores mais engajados.

## 📊 Dashboard Administrativo
- [ ] Criar visualização de métricas gerais de engajamento (número de leitores, etc.).
- [ ] Exibir ranking dos leitores mais engajados.
- [ ] Adicionar filtros para visualizar estatísticas por newsletter, período de tempo e status.
- [ ] Implementar gráficos para mostrar padrões de engajamento (ex: número de aberturas, streak).

## 🏆 Regras de Streak
- [x] Implementar incremento do streak (+1) quando o leitor abrir a newsletter consecutivamente.
- [x] Garantir que o streak não conte domingos.
- [x] Reiniciar o streak caso o leitor falhe em abrir por mais de um dia (exceto domingo).

## 🗃️ Banco de Dados
- [x] Criar tabela de streaks para armazenar informações de streak (user_id, current_streak, etc.).
- [x] Criar tabela de logs de leitura para registrar as aberturas de newsletters.
- [ ] Implementar consultas eficientes e escaláveis para obter dados dos leitores e seus streaks.

## 🎮 Funcionalidade de Gamificação
- [-] Adicionar badges ou níveis para os leitores com base em seu streak.

## 🖥️ Frontend
- [ ] Criar interface responsiva para a área logada e dashboard administrativo.
- [ ] Implementar feedback visual na área logada (ex: mensagens de motivação para manter streak).

## 🧪 Testes
- [-] Realizar testes unitários para a lógica de atualização do streak.
- [-] Realizar testes de integração para garantir o funcionamento correto do webhook.
- [-] Realizar testes de usabilidade para a área logada e dashboard administrativo.

## ⚡ Escalabilidade e Performance
- [ ] Otimizar consultas SQL para alta performance (ex: uso de índices, join eficientes).
- [ ] Implementar cache para melhorar performance de dados frequentemente acessados.

## 📑 Documentação
- [ ] Adicionar documentação no README com instruções para rodar o projeto.
- [ ] Documentar endpoints da API (se houver).





BUILD COMMAND: cd front_end && npm run build && cd ../back_end && npm run build

INITIAL COMMAND: cd front_end && npm install && cd ../back_end && npm install 